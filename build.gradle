import org.jsonschema2pojo.gradle.GenerateJsonSchemaJavaTask

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        // For Maven and Maven Central support
        classpath group: 'com.bmuschko', name: 'gradle-nexus-plugin', version: '2.3.1'
        // For JSONSchema2POJO
        classpath group: 'org.jsonschema2pojo', name: 'jsonschema2pojo-gradle-plugin', version: 'latest.integration'
    }
}


plugins {
    id 'java'

    // For Maven and Maven Central support
    id 'maven-publish'
    id 'com.bmuschko.nexus' version '2.3.1'
    id 'io.codearte.nexus-staging' version '0.11.0'
}

// Calling 'apply' here because 'jsonschema2pojo' doesn't exist in the Gradle Central Plugin Repository (it's only
// in Maven central).
apply plugin: 'jsonschema2pojo'
tasks.getByName("generateJsonSchema2Pojo").enabled(false) // Disable default 'jsonSchema2Pojo' task

group 'net.jacobpeterson'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    // Logging framework
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'

    // Google Guava for a variety of useful methods
    implementation group: 'com.google.guava', name: 'guava', version: '20.0'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

javadoc {
    // Used to suppress Javadoc linting warnings
    options.addStringOption('Xdoclint:none', '-quiet')
    // Explicitly define Charset for Javadocs
    options.addStringOption("charset", "UTF-8")
    // Add Java SE 8 link
    options.addStringOption("link", "https://docs.oracle.com/javase/8/docs/api/")
}

//
// START Publishing
//
modifyPom {
    project {
        name = 'IQFeed4j'
        description = 'A Java API for the market data vendor DTN IQFeed.'
        url = 'https://github.com/Petersoj/IQFeed4j'
        inceptionYear = '2021'

        licenses {
            license {
                name = 'MIT License'
                url = 'https://opensource.org/licenses/MIT'
            }
        }

        developers {
            developer {
                id = 'Petersoj'
                name = 'Jacob Peterson'
            }
        }

        scm {
            url = "https://github.com/Petersoj/IQFeed4j.git"
            connection = "scm:git:https://github.com/Petersoj/IQFeed4j.git"
            developerConnection = "scm:git:git@github.com/Petersoj/IQFeed4j.git"
        }
    }
}

extraArchive {
    sources = true
    tests = true
    javadoc = true
}

nexus {
    sign = true
    repositoryUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
    snapshotRepositoryUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
}

nexusStaging {
    packageGroup = "net.jacobpeterson"
}
//
// END Publishing
//

//
// START POJO generation
//
// The generated POJOs will be in a package structure analogous to the path in the 'schema_json/' directory
// See: https://github.com/joelittlejohn/jsonschema2pojo/wiki/Reference

final def targetDirectoryPath = file("${project.buildDir}/generated-sources/schemajson").getPath()

task generatePOJOs() {
    final def jsonSourceDirectory = file("${project.projectDir}/schema_json").getPath()
    final def jsonPackageNameStart = "net.jacobpeterson.iqfeed4j.model"

    // Loop through all files in schema JSON file tree
    file(jsonSourceDirectory).eachFileRecurse { jsonFile ->
        if (jsonFile.getName().endsWith(".json")) {
            def startPackageIndex = jsonFile.getAbsolutePath().indexOf(jsonSourceDirectory) +
                    jsonSourceDirectory.length()
            def targetPackage = jsonPackageNameStart + jsonFile.getParentFile().getAbsolutePath()
                    .substring(startPackageIndex)
                    .replace(File.separator, '.').replace('-', '').replace('_', '')
                    .toLowerCase()

            def jsonToPOJOTask = tasks.create('JSONSchema2POJO-' + targetPackage + "." + jsonFile.getName(),
                    GenerateJsonSchemaJavaTask)

            // Configure this task to participate in incremental builds so that it only executes when changes occur
            jsonToPOJOTask.configure {
                inputs.file(jsonFile)
                outputs.dir(targetDirectoryPath)
            }

            jsonToPOJOTask.doFirst {
                jsonToPOJOTask.configuration.source = files(jsonFile.getAbsolutePath())
                jsonToPOJOTask.configuration.targetDirectory = file(targetDirectoryPath)
                jsonToPOJOTask.configuration.targetPackage = targetPackage
            }

            dependsOn jsonToPOJOTask
        }
    }
}

compileJava {
    dependsOn generatePOJOs
}

sourceSets {
    main {
        java {
            srcDir targetDirectoryPath
        }
    }
}

jsonSchema2Pojo {
    includeAdditionalProperties = false
    targetDirectory = file(targetDirectoryPath)
    propertyWordDelimiters = ['-', '_'] as char[]
    annotationStyle = 'none'
    sourceType = 'jsonschema'
    customDateTimePattern = "yyyy-MM-ddTHH:mm:ssZ"
    includeConstructors = true
    serializable = true
    includeGetters = true
    includeSetters = true
}
//
// END POJO generation
//
